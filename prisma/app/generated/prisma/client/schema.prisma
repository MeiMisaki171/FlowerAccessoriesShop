generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  phone     String   @unique
  username  String   @unique
  fullName  String
  email     String?
  password  String?
  provider  String   @default("local")
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart?
  orders    Order[]
}

model Product {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  categoryId  Int?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  discount    Float?         @default(0)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  category    Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  images      ProductImage[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int
  total           Float
  status          String
  shippingAddress String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  discount        Float?      @default(0)
  shippingFee     Float       @default(0)
  voucher         String?
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  payment         Payment?
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int      @unique
  paymentMethod String
  paymentStatus String
  transactionId String?
  paymentDate   DateTime @default(now())
  order         Order    @relation(fields: [orderId], references: [id])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  imageUrl  String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Voucher {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Float
  isActive   Boolean  @default(true)
  validUntil DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Dbhc {
  ID         Int     @id(map: "PK__dbhc__3214EC27F336CA56") @map("ID")
  MA_DBHC    String? @map("MA_DBHC") @db.NVarChar(10)
  MA_CHA     String? @map("MA_CHA") @db.NVarChar(10)
  TEN        String? @map("TEN") @db.NVarChar(200)
  TINH_TRANG String? @default("1", map: "DF__dbhc__TINH_TRANG__2CBDA3B5") @map("TINH_TRANG") @db.Char(1)

  @@map("dbhc")
}
